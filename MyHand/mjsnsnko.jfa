using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

using Microsoft.Kinect;
using Microsoft.Kinect.Toolkit;
using Microsoft.Kinect.Toolkit.Controls;
using Microsoft.Kinect.Toolkit.Interaction;

//using Microsoft.Samples.Kinect.ControlsBasics;

using SerialPortChat;
using System.Threading;

using Fizbin.Kinect.Gestures.Segments;
using Fizbin.Kinect.Gestures;

using LightBuzz.Vitruvius.WPF;
using MyHand;

//using Coding4Fun.Kinect.Wpf;
//using HandTrackingFramework;

namespace MyHand
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // 串口通讯内容
        private PortChat portChat;
        private int angleX;
        private int angleY;
        private int preAngleX;
        private int preAngleY;
        private bool _continue;
        Thread serialPortThread;

        private readonly Brush[] skeletonBrushes = new Brush[] { Brushes.Blue };

        public KinectSensor sensor;

        private Skeleton[] skeletons = new Skeleton[0];

        private KinectSensorChooser sensorChooser;

        // skeleton gesture recognizer
        private GestureController gestureController;

        private struct JPoint
        {
            public float X;
            public float Y;
            public float Z;
        }
        

        private JPoint leftHand;

        const int CanvasWidth = 640;
        const int CanvasHeight = 480;

        public MainWindow()
        {
            InitializeComponent();

            // 启动串口线程
            portChat = new PortChat();
            portChat.init("COM3", 9600);
            _continue = true;
            serialPortThread = new Thread(sendServo);
            serialPortThread.Start();

            // initialize the sensor chooser and UI
            this.sensorChooser = new KinectSensorChooser();
            this.sensorChooser.KinectChanged += SensorChooserOnKinectChanged;
            this.sensorChooserUi.KinectSensorChooser = this.sensorChooser;
            this.sensorChooser.Start();


            // Bind the sensor chooser's current sensor to the KinectRegion
            var regionSensorBinding = new Binding("Kinect") { Source = this.sensorChooser };
            //BindingOperations.SetBinding(this.kinectRegion, KinectRegion.KinectSensorProperty, regionSensorBinding);

            gestureController = new GestureController();
            gestureController.GestureRecognized += OnGestureRecognized;

            // register the gestures for this demo
            RegisterGestures();

        }

        /// <summary>
        /// Called when the KinectSensorChooser gets a new sensor
        /// </summary>
        /// <param name="sender">sender of the event</param>
        /// <param name="args">event arguments</param>
        private void SensorChooserOnKinectChanged(object sender, KinectChangedEventArgs args)
        {
            if (args.OldSensor != null)
            {
                try
                {
                    args.OldSensor.DepthStream.Range = DepthRange.Default;
                    args.OldSensor.SkeletonStream.EnableTrackingInNearRange = false;
                    args.OldSensor.DepthStream.Disable();
                    args.OldSensor.SkeletonStream.Disable();
                }
                catch (InvalidOperationException)
                {
                    // KinectSensor might enter an invalid state while enabling/disabling streams or stream features.
                    // E.g.: sensor might be abruptly unplugged.
                }
            }

            if (args.NewSensor != null)
            {
                try
                {
                    args.NewSensor.DepthStream.Enable(DepthImageFormat.Resolution640x480Fps30);
                    //args.NewSensor.SkeletonStream.Enable();
                    args.NewSensor.SkeletonStream.Enable(new TransformSmoothParameters()
                    {
                        Smoothing = 0.75f,
                        Correction = 0.0f,
                        Prediction = 0.0f,
                        JitterRadius = 0.05f,
                        MaxDeviationRadius = 0.04f
                    });

                    try
                    {
                        args.NewSensor.DepthStream.Range = DepthRange.Near;
                        args.NewSensor.SkeletonStream.EnableTrackingInNearRange = true;
                    }
                    catch (InvalidOperationException)
                    {
                        // Non Kinect for Windows devices do not support Near mode, so reset back to default mode.
                        args.NewSensor.DepthStream.Range = DepthRange.Default;
                        args.NewSensor.SkeletonStream.EnableTrackingInNearRange = false;
                    }
                }
                catch (InvalidOperationException)
                {
                    // KinectSensor might enter an invalid state while enabling/disabling streams or stream features.
                    // E.g.: sensor might be abruptly unplugged.
                }


                //args.NewSensor.DepthFrameReady += OnDepthFrameReady;
                args.NewSensor.SkeletonFrameReady += OnSkeletonFrameReady;
                this.sensor = args.NewSensor;
            }
        }

        private void OnDepthFrameReady(object sender, DepthImageFrameReadyEventArgs e)
        {
            using (DepthImageFrame frame = e.OpenDepthImageFrame())
            {
                if (frame == null)
                    return;
                depthImage.Source = frame.ToBitmap(DepthImageMode.Colors);
                //depthImage.Source = frame.ToBitmapSource();
                
                
            }
            //throw new NotImplementedException();
        }

        private void OnSkeletonFrameReady(object sender, SkeletonFrameReadyEventArgs e)
        {
            using (SkeletonFrame frame = e.OpenSkeletonFrame())
            {
                //skeletonCanvas.ClearSkeletons();
                if (frame == null)
                    return;

                // resize the skeletons array if needed
                if (skeletons.Length != frame.SkeletonArrayLength)
                    skeletons = new Skeleton[frame.SkeletonArrayLength];

                // get the skeleton data
                frame.CopySkeletonDataTo(skeletons);

                foreach (var skeleton in skeletons)
                {
                    // skip the skeleton if it is not being tracked 
                    if (skeleton.TrackingState != SkeletonTrackingState.Tracked)
                        continue;

                    //skeletonCanvas.DrawSkeleton(skeleton);

                    GetJointLocations(skeleton);
                    DrawSkeleton();

                    // update the gesture controller
                    gestureController.UpdateAllGestures(skeleton);
                }
            }
        }


        /// <summary>
        /// Helper function to register all available 
        /// </summary>
        private void RegisterGestures()
        {
            // define the gestures for the demo

            IRelativeGestureSegment[] joinedhandsSegments = new IRelativeGestureSegment[20];
            JoinedHandsSegment1 joinedhandsSegment = new JoinedHandsSegment1();
            for (int i = 0; i < 20; i++)
            {
                // gesture consists of the same thing 10 times 
                joinedhandsSegments[i] = joinedhandsSegment;
            }
            gestureController.AddGesture("JoinedHands", joinedhandsSegments);

            IRelativeGestureSegment[] menuSegments = new IRelativeGestureSegment[20];
            MenuSegment1 menuSegment = new MenuSegment1();
            for (int i = 0; i < 20; i++)
            {
                // gesture consists of the same thing 20 times 
                menuSegments[i] = menuSegment;
            }
            gestureController.AddGesture("Menu", menuSegments);

            IRelativeGestureSegment[] swipeleftSegments = new IRelativeGestureSegment[3];
            swipeleftSegments[0] = new SwipeLeftSegment1();
            swipeleftSegments[1] = new SwipeLeftSegment2();
            swipeleftSegments[2] = new SwipeLeftSegment3();
            gestureController.AddGesture("SwipeLeft", swipeleftSegments);
            
            IRelativeGestureSegment[] leanleftSegments = new IRelativeGestureSegment[2];
            leanleftSegments[0] = new LeanLeftSegment1();
            leanleftSegments[1] = new LeanLeftSegment2();
            gestureController.AddGesture("LeanLeft", leanleftSegments);

            IRelativeGestureSegment[] swiperightSegments = new IRelativeGestureSegment[3];
            swiperightSegments[0] = new SwipeRightSegment1();
            swiperightSegments[1] = new SwipeRightSegment2();
            swiperightSegments[2] = new SwipeRightSegment3();
            gestureController.AddGesture("SwipeRight", swiperightSegments);

            IRelativeGestureSegment[] waveRightSegments = new IRelativeGestureSegment[6];
            WaveRightSegment1 waveRightSegment1 = new WaveRightSegment1();
            WaveRightSegment2 waveRightSegment2 = new WaveRightSegment2();
            waveRightSegments[0] = waveRightSegment1;
            waveRightSegments[1] = waveRightSegment2;
            waveRightSegments[2] = waveRightSegment1;
            waveRightSegments[3] = waveRightSegment2;
            waveRightSegments[4] = waveRightSegment1;
            waveRightSegments[5] = waveRightSegment2;
            gestureController.AddGesture("WaveRight", waveRightSegments);

            IRelativeGestureSegment[] waveLeftSegments = new IRelativeGestureSegment[6];
            WaveLeftSegment1 waveLeftSegment1 = new WaveLeftSegment1();
            WaveLeftSegment2 waveLeftSegment2 = new WaveLeftSegment2();
            waveLeftSegments[0] = waveLeftSegment1;
            waveLeftSegments[1] = waveLeftSegment2;
            waveLeftSegments[2] = waveLeftSegment1;
            waveLeftSegments[3] = waveLeftSegment2;
            waveLeftSegments[4] = waveLeftSegment1;
            waveLeftSegments[5] = waveLeftSegment2;
            gestureController.AddGesture("WaveLeft", waveLeftSegments);

            IRelativeGestureSegment[] zoomInSegments = new IRelativeGestureSegment[3];
            zoomInSegments[0] = new ZoomSegment1();
            zoomInSegments[1] = new ZoomSegment2();
            zoomInSegments[2] = new ZoomSegment3();
            gestureController.AddGesture("ZoomIn", zoomInSegments);

            IRelativeGestureSegment[] zoomOutSegments = new IRelativeGestureSegment[3];
            zoomOutSegments[0] = new ZoomSegment3();
            zoomOutSegments[1] = new ZoomSegment2();
            zoomOutSegments[2] = new ZoomSegment1();
            gestureController.AddGesture("ZoomOut", zoomOutSegments);

            IRelativeGestureSegment[] swipeUpSegments = new IRelativeGestureSegment[3];
            swipeUpSegments[0] = new SwipeUpSegment1();
            swipeUpSegments[1] = new SwipeUpSegment2();
            swipeUpSegments[2] = new SwipeUpSegment3();
            gestureController.AddGesture("SwipeUp", swipeUpSegments);

            IRelativeGestureSegment[] swipeDownSegments = new IRelativeGestureSegment[3];
            swipeDownSegments[0] = new SwipeDownSegment1();
            swipeDownSegments[1] = new SwipeDownSegment2();
            swipeDownSegments[2] = new SwipeDownSegment3();
            gestureController.AddGesture("SwipeDown", swipeDownSegments);
        }


        private void OnGestureRecognized(object sender, GestureEventArgs e)
        {
            switch (e.GestureName)
            {
                case "Menu":
                    gestureBlock.Text = "Menu";
                    break;
                case "WaveRight":
                    gestureBlock.Text = "Wave Right";
                    break;
                case "WaveLeft":
                    gestureBlock.Text = "Wave Left";
                    break;
                case "JoinedHands":
                    gestureBlock.Text = "Joined Hands";
                    break;
                case "SwipeLeft":
                    gestureBlock.Text = "Swipe Left";
                    angleX += 20;
                    break;
                case "SwipeRight":
                    gestureBlock.Text = "Swipe Right";
                    angleX -= 20;
                    break;
                case "SwipeUp":
                    gestureBlock.Text = "Swipe Up";
                    angleY -= 20;
                    break;
                case "SwipeDown":
                    gestureBlock.Text = "Swipe Down";
                    angleY += 20;
                    break;
                case "ZoomIn":
                    gestureBlock.Text = "Zoom In";
                    break;
                case "ZoomOut":
                    gestureBlock.Text = "Zoom Out";
                    break;

                default:
                    break;
            }
        }

        // 控制舵机角度
        private void sendServo()
        {
            angleX = 0;
            angleY = 0;
            preAngleX = 0;
            preAngleY = 0;
            while (_continue)
            {
                if (angleX != preAngleX || angleY != preAngleY)
                {
                    if (angleX < 0) angleX = 0;
                    else if (angleX > 126) angleX = 127;
                    if (angleY < 0) angleY = 0;
                    else if (angleY > 126) angleY = 127;
                    portChat.send("s" + (char)angleX + (char)angleY);
                    preAngleX = angleX;
                    preAngleY = angleY;
                    //angleX += 10;
                }
                Thread.Sleep(200);
            }
        }

        private void WindowClosing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            this.serialPortThread.Abort();
            this.sensorChooser.Stop();
        }

        #region Change Servo Angle
        private void PageLeftButtonClick(object sender, RoutedEventArgs e)
        {
            angleX += 5;
        }

        private void PageRightButtonClick(object sender, RoutedEventArgs e)
        {
            angleX -= 5;
        }

        private void PageUpButtonClick(object sender, RoutedEventArgs e)
        {
            angleY -= 5;
        }

        private void PageDownButtonClick(object sender, RoutedEventArgs e)
        {
            angleY += 5;
        }
        #endregion


        # region mapskeletonpointtodepthpoint method
        private void DrawSkeleton(Skeleton skeleton)
        {

            Polyline figure;
            Brush userBrush;

            //skeletonCanvas.DrawSkeleton(skeleton);
            userBrush = this.skeletonBrushes[0];

            //绘制头和躯干
            figure = CreateFigure(skeleton, userBrush, new[] { JointType.Head, JointType.ShoulderCenter, JointType.ShoulderLeft, JointType.Spine,
                                                                JointType.ShoulderRight, JointType.ShoulderCenter, JointType.HipCenter
                                                                });
            skeletonLayoutRoot.Children.Add(figure);

            figure = CreateFigure(skeleton, userBrush, new[] { JointType.HipLeft, JointType.HipRight });
            skeletonLayoutRoot.Children.Add(figure);

            //绘制作腿
            figure = CreateFigure(skeleton, userBrush, new[] { JointType.HipCenter, JointType.HipLeft, JointType.KneeLeft, JointType.AnkleLeft, JointType.FootLeft });
            skeletonLayoutRoot.Children.Add(figure);

            //绘制右腿
            figure = CreateFigure(skeleton, userBrush, new[] { JointType.HipCenter, JointType.HipRight, JointType.KneeRight, JointType.AnkleRight, JointType.FootRight });
            skeletonLayoutRoot.Children.Add(figure);

            //绘制左臂
            figure = CreateFigure(skeleton, userBrush, new[] { JointType.ShoulderLeft, JointType.ElbowLeft, JointType.WristLeft, JointType.HandLeft });
            skeletonLayoutRoot.Children.Add(figure);

            //绘制右臂
            figure = CreateFigure(skeleton, userBrush, new[] { JointType.ShoulderRight, JointType.ElbowRight, JointType.WristRight, JointType.HandRight });
            skeletonLayoutRoot.Children.Add(figure);


        }


        private Polyline CreateFigure(Skeleton skeleton, Brush brush, JointType[] joints)
        {
            Polyline figure = new Polyline();

            figure.StrokeThickness = 8;
            figure.Stroke = brush;

            for (int i = 0; i < joints.Length; i++)
            {
                figure.Points.Add(GetJointPoint(skeleton.Joints[joints[i]]));
            }

            return figure;
        }

        private Point GetJointPoint(Joint joint)
        {
            CoordinateMapper cm = new CoordinateMapper(sensor);

            DepthImagePoint point = cm.MapSkeletonPointToDepthPoint(joint.Position, this.sensor.DepthStream.Format);
            //ColorImagePoint point = cm.MapSkeletonPointToColorPoint(joint.Position, this.KinectDevice.ColorStream.Format);
            point.X *= (int)this.skeletonLayoutRoot.ActualWidth / sensor.DepthStream.FrameWidth;
            point.Y *= (int)this.skeletonLayoutRoot.ActualHeight / sensor.DepthStream.FrameHeight;

            return new Point(point.X, point.Y);
        }
        #endregion


        private void DrawSkeleton()
        {
            SetElementPosition(LeftHandEllipse, leftHand);
        }

        private void SetElementPosition(FrameworkElement element, JPoint jp)
        {
            Canvas.SetLeft(element, jp.X - element.Width / 2);
            Canvas.SetTop(element, jp.Y);
            //Canvas.SetZIndex(element, 100);
        }


        private void GetJointLocations(Skeleton skeleton)
        {
            // 这里右手的结点是我左手的位置信息
            leftHand = JointLocation(skeleton.Joints[JointType.HandRight]);
            JPoint rightHand = JointLocation(skeleton.Joints[JointType.HandLeft]);


        }

        private JPoint JointLocation(Joint joint)
        {
            JPoint tmp;
            var scaledJoint = joint.ScaleTo(CanvasWidth, CanvasHeight, .3f, .3f);
            tmp.X = scaledJoint.Position.X;
            tmp.Y = scaledJoint.Position.Y;
            tmp.Z = scaledJoint.Position.Z;
            return tmp;
        }
    }
}
